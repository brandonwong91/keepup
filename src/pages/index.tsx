import { SignIn, SignOutButton, useUser } from "@clerk/nextjs";
import {
  Card,
  Button,
  Display,
  Text,
  Page,
  Badge,
  Fieldset,
  Loading,
} from "@geist-ui/core";
import { type List } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import EditListModal from "~/components/EditListModal";
import InputForm from "~/components/InputForm";

import { api } from "~/utils/api";

export interface ListDataUpdateInput {
  name: string;
  title?: string;
}

const Home: NextPage = () => {
  const user = useUser();
  const ctx = api.useContext();
  const [listData, setListData] = useState<List>();
  const [showModal, setShowModal] = useState(false);
  const closeModalHandler = () => {
    setShowModal(false);
  };
  const { data, isLoading: listLoading } = api.lists.getAll.useQuery({
    userId: user.user?.id ?? "",
  });
  const { mutate: createList, isLoading: addLoading } =
    api.lists.create.useMutation({
      onSuccess: () => {
        void ctx.lists.getAll.invalidate();
      },
    });
  const { mutate: updateList, isLoading: updateLoading } =
    api.lists.update.useMutation({
      onSuccess: () => {
        void ctx.lists.getAll.invalidate();
        setShowModal(false);
      },
    });
  const { mutate: deleteList, isLoading: deleteLoading } =
    api.lists.delete.useMutation({
      onSuccess: () => {
        void ctx.lists.getAll.invalidate();
      },
    });

  const handleAddList = (name: string, title: string) => {
    createList({
      name,
      title,
    });
  };

  const handleEdit = (listDataInput: ListDataUpdateInput) => {
    if (listData)
      updateList({
        id: listData.id,
        name: listDataInput.name,
        title: listDataInput?.title,
      });
  };

  const handleDelete = (id: string) => {
    deleteList({
      id,
    });
  };
  return (
    <>
      <Head>
        <title>Keep Up</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {!user.isSignedIn && (
          <div className="flex h-screen items-center justify-center">
            <Display shadow>
              <Text h1 className="mx-4 bg-transparent">{`Keep Up`}</Text>
              <SignIn />
            </Display>
          </div>
        )}
        {!!user.isSignedIn && user.user.firstName && (
          <Page>
            <Page.Header>
              <div className="mt-4">
                <Card>
                  <div className="flex justify-between">
                    <div className="self-center text-xl">{`Hi there, ${user.user.firstName}`}</div>
                    <Button type="secondary" auto>
                      <SignOutButton />
                    </Button>
                  </div>
                </Card>
              </div>
            </Page.Header>
            <Page.Content>
              <div className="grid gap-4">
                <div className="flex place-content-center gap-x-1">
                  <InputForm
                    onEnterKeyDown={handleAddList}
                    addLoading={addLoading}
                  />
                </div>
                {listLoading && (
                  <Card>
                    <div className="grid gap-y-2">
                      <div className="h-4 w-auto animate-pulse rounded-3xl bg-slate-200" />
                      <div className="h-4 w-auto animate-pulse rounded-3xl bg-slate-200" />
                      <div className="h-4 w-auto animate-pulse rounded-3xl bg-slate-200" />
                    </div>
                  </Card>
                )}
                {data &&
                  data.length > 0 &&
                  data.map((list: List) => (
                    <div key={list.id}>
                      {listData?.id === list.id && showModal ? (
                        <Fieldset>
                          <Loading />
                        </Fieldset>
                      ) : (
                        <Fieldset>
                          <div
                            onClick={() => {
                              setShowModal(true);
                              setListData(list);
                            }}
                          >
                            {list.title ? (
                              <div>
                                <Fieldset.Title>{list.title}</Fieldset.Title>
                                <Fieldset.Subtitle>
                                  {list.name}
                                </Fieldset.Subtitle>
                              </div>
                            ) : (
                              <Fieldset.Title>{list.name}</Fieldset.Title>
                            )}
                          </div>
                          <Fieldset.Footer>
                            <Badge type="success" scale={1 / 2}>
                              {`${list.createdAt.toLocaleDateString()} ${list.createdAt.toLocaleTimeString()}`}
                            </Badge>
                            <Button
                              type="error"
                              auto
                              scale={1 / 3}
                              font="12px"
                              onClick={() => {
                                setShowModal(false);
                                handleDelete(list.id);
                              }}
                              loading={deleteLoading}
                            >
                              Delete
                            </Button>
                          </Fieldset.Footer>
                        </Fieldset>
                      )}
                    </div>
                  ))}
              </div>
              <EditListModal
                showModal={showModal}
                closeHandler={closeModalHandler}
                listData={listData}
                updateHandler={handleEdit}
                updateLoading={updateLoading}
              />
            </Page.Content>
          </Page>
        )}
      </main>
    </>
  );
};

export default Home;
