import { SignIn, SignOutButton, useUser } from "@clerk/nextjs";
import {
  Card,
  Button,
  Display,
  Text,
  Page,
  Input,
  Badge,
  Fieldset,
} from "@geist-ui/core";
import { Github } from "@geist-ui/icons";
import { type List } from "@prisma/client";
import clsx from "clsx";
import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import InputForm from "~/components/InputForm";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  const user = useUser();
  const ctx = api.useContext();
  const [input, setInput] = useState("");
  const [selected, setSelected] = useState<string>("");
  const { data, isLoading: listLoading } = api.lists.getAll.useQuery({
    userId: user.user?.id ?? "",
  });
  const {
    mutate: createList,
    isLoading: addLoading,
    isSuccess,
  } = api.lists.create.useMutation({
    onSuccess: () => {
      void ctx.lists.getAll.invalidate();
    },
  });
  const { mutate: updateList, isLoading: updateLoading } =
    api.lists.update.useMutation({
      onSuccess: () => {
        void ctx.lists.getAll.invalidate();
        setInput("");
        setSelected("");
      },
    });
  const { mutate: deleteList, isLoading: deleteLoading } =
    api.lists.delete.useMutation({
      onSuccess: () => {
        void ctx.lists.getAll.invalidate();
      },
    });

  const handleAdd = () => {
    createList({
      name: input,
    });
  };
  const handleAddList = (name: string, title: string) => {
    createList({
      name,
      title,
    });
  };
  const handleEdit = (id: string) => {
    updateList({
      id,
      name: input,
    });
  };
  const handleDelete = (id: string) => {
    deleteList({
      id,
    });
  };
  return (
    <>
      <Head>
        <title>Keep Up</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {!user.isSignedIn && (
          <div className="flex h-screen items-center justify-center">
            <Display shadow>
              <Text h1 className="mx-4 bg-transparent">{`Keep Up`}</Text>
              <SignIn />
            </Display>
          </div>
        )}
        {!!user.isSignedIn && user.user.firstName && (
          <Page>
            <Page.Header>
              <div className="mt-4">
                <Card>
                  <div className="flex justify-between">
                    <div className="self-center text-xl">{`Hi there, ${user.user.firstName}`}</div>
                    <Button type="secondary" auto>
                      <SignOutButton />
                    </Button>
                  </div>
                </Card>
              </div>
            </Page.Header>
            <Page.Content>
              <div className="grid gap-4">
                <div className="flex place-content-center gap-x-1">
                  <InputForm
                    onEnterKeyDown={handleAddList}
                    addLoading={addLoading}
                  />
                  {/* <Input
                    label="Note name"
                    clearable
                    onChange={(event) => {
                      setInput(event.target.value);
                    }}
                    onKeyDown={(e) => {
                      if (e.key === "Enter") {
                        e.preventDefault();
                        if (input !== "") {
                          if (selected) {
                            updateList({
                              id: selected,
                              name: input,
                            });
                          } else
                            createList({
                              name: input,
                            });
                          setTimeout(() => setInput(""), 300);
                        }
                      }
                    }}
                    value={input}
                  />
                  <Button
                    auto
                    scale={0.8}
                    onClick={() => {
                      if (selected) {
                        handleEdit(selected);
                      } else {
                        handleAdd();
                      }
                    }}
                    loading={addLoading || updateLoading}
                  >
                    {selected ? "Update" : "Add"}
                  </Button> */}
                </div>
                {listLoading && (
                  <Card>
                    <div className="grid gap-y-2">
                      <div className="h-4 w-auto animate-pulse rounded-3xl bg-slate-200" />
                      <div className="h-4 w-auto animate-pulse rounded-3xl bg-slate-200" />
                      <div className="h-4 w-auto animate-pulse rounded-3xl bg-slate-200" />
                    </div>
                  </Card>
                )}
                {data &&
                  data.length > 0 &&
                  data.map((list: List) => (
                    <div
                      key={list.id}
                      className={clsx({
                        "rounded-xl border-[2px] border-lime-300":
                          list.id === selected,
                      })}
                    >
                      <Fieldset>
                        {list.title ? (
                          <div>
                            <Fieldset.Title
                              className="cursor-pointer"
                              onClick={() => {
                                setInput(list.name);
                                if (selected === list.id) {
                                  setSelected("");
                                  setInput("");
                                } else setSelected(list.id);
                              }}
                            >
                              {list.title}
                            </Fieldset.Title>
                            <Fieldset.Subtitle>{list.name}</Fieldset.Subtitle>
                          </div>
                        ) : (
                          <Fieldset.Title
                            className="cursor-pointer"
                            onClick={() => {
                              setInput(list.name);
                              if (selected === list.id) {
                                setSelected("");
                                setInput("");
                              } else setSelected(list.id);
                            }}
                          >
                            {list.name}
                          </Fieldset.Title>
                        )}
                        <Fieldset.Footer>
                          <Badge type="success" scale={1 / 2}>
                            {`${list.createdAt.toLocaleDateString()} ${list.createdAt.toLocaleTimeString()}`}
                          </Badge>
                          <Button
                            type="error"
                            auto
                            scale={1 / 3}
                            font="12px"
                            onClick={() => {
                              handleDelete(list.id);
                            }}
                            loading={deleteLoading}
                          >
                            Delete
                          </Button>
                        </Fieldset.Footer>
                      </Fieldset>
                    </div>
                  ))}
              </div>
            </Page.Content>
          </Page>
        )}
      </main>
    </>
  );
};

export default Home;
